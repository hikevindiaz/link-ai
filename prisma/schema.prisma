generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model OpenAIConfig {
  id           String   @id @default(cuid())
  userId       String   @unique
  globalAPIKey String
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatbotFiles {
  id         String   @id @default(cuid())
  assignedAt DateTime @default(now())
  chatbotId  String
  fileId     String
  chatbot    Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model ChatbotMessagesExport {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now()) @map("created_at")
  blobUrl         String
  blobDownloadUrl String
  lastXDays       Int
  chatbotId       String
  chatbot         Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model ChatbotErrors {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now()) @map("created_at")
  errorMessage String
  threadId     String
  chatbotId    String
  chatbot      Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Chatbot {
  id                              String                  @id @default(cuid())
  name                            String
  userId                          String
  openaiId                        String?                 @default("")
  createdAt                       DateTime                @default(now()) @map("created_at")
  openaiKey                       String?                 @default("")
  modelId                         String?
  prompt                          String?                 @default("You are a helpful assistant.")
  welcomeMessage                  String?                 @default("Hello! How can I help you today?")
  chatbotErrorMessage             String?                 @default("I'm sorry, I encountered an error. Please try again later.")
  isImported                      Boolean                 @default(false)
  chatTitle                       String                  @default("2")
  chatMessagePlaceHolder          String                  @default("Type a message...")
  rightToLeftLanguage             Boolean                 @default(false)
  bubbleColor                     String                  @default("#FFFFFF")
  bubbleTextColor                 String                  @default("#000000")
  riveOrbColor                    Int?
  borderGradientColors            String[]                @default([])
  chatHeaderBackgroundColor       String                  @default("FFFFFF")
  chatHeaderTextColor             String                  @default("#000000")
  chatbotReplyBackgroundColor     String                  @default("#e4e4e7")
  chatbotReplyTextColor           String                  @default("#000000")
  userReplyBackgroundColor        String                  @default("#e4e4e7")
  userReplyTextColor              String                  @default("#000000")
  chatbotLogoURL                  String?
  chatInputStyle                  String                  @default("default")
  inquiryEnabled                  Boolean                 @default(false)
  inquiryLinkText                 String                  @default("Contact our support team")
  inquiryTitle                    String                  @default("Contact our support team")
  inquirySubtitle                 String                  @default("Our team is here to help you with any questions you may have. Please provide us with your email and a brief message so we can assist you.")
  inquiryEmailLabel               String                  @default("Email")
  inquiryMessageLabel             String                  @default("Message")
  inquirySendButtonText           String                  @default("Send message")
  inquiryAutomaticReplyText       String                  @default("Your inquiry has been sent. Our team will get back to you shortly.")
  inquiryDisplayLinkAfterXMessage Int                     @default(1)
  chatHistoryEnabled              Boolean                 @default(false)
  displayBranding                 Boolean                 @default(true)
  chatFileAttachementEnabled      Boolean                 @default(false)
  maxCompletionTokens             Int                     @default(1200)
  maxPromptTokens                 Int                     @default(1200)
  bannedIps                       String[]                @default([])
  allowEveryone                   Boolean                 @default(true)
  allowedIpRanges                 String[]                @default([])
  chatBackgroundColor             String                  @default("#FFFFFF")
  buttonTheme                     String                  @default("light")
  websiteEnabled                  Boolean                 @default(false)
  whatsappEnabled                 Boolean                 @default(false)
  smsEnabled                      Boolean                 @default(false)
  messengerEnabled                Boolean                 @default(false)
  instagramEnabled                Boolean                 @default(false)
  callTimeout                     Int?
  checkUserPresence               Boolean?                @default(false)
  hangUpMessage                   String?
  language                        String?                 @default("en")
  phoneNumber                     String?
  presenceMessage                 String?
  presenceMessageDelay            Int?
  responseRate                    String?
  secondLanguage                  String?
  silenceTimeout                  Int?
  temperature                     Float                   @default(0.7)
  voice                           String?
  lastTrainedAt                   DateTime?
  trainingMessage                 String?
  trainingStatus                  String                  @default("idle")
  iconType                        String?                 @default("orb")
  calendarEnabled                 Boolean                 @default(false)
  calendarId                      String?
  assistantSettings               AssistantSettings?
  ChatbotErrors                   ChatbotErrors[]
  ChatbotFiles                    ChatbotFiles[]
  ChatbotMessagesExport           ChatbotMessagesExport[]
  ClientInquiries                 ClientInquiries[]
  forms                           ChatbotForm[]
  calendar                        Calendar?               @relation(fields: [calendarId], references: [id])
  model                           ChatbotModel?           @relation(fields: [modelId], references: [id])
  user                            User                    @relation(fields: [userId], references: [id])
  formSubmissions                 FormSubmission[]
  twilioPhoneNumber               TwilioPhoneNumber?
  knowledgeSources                KnowledgeSource[]       @relation("ChatbotToKnowledgeSource")

  @@map("chatbots")
}

model File {
  id                String           @id @default(cuid())
  userId            String
  name              String
  openAIFileId      String           @unique
  createdAt         DateTime         @default(now()) @map("created_at")
  blobUrl           String
  crawlerId         String?
  knowledgeSourceId String?
  storageProvider   String           @default("vercel")
  storageUrl        String?
  ChatbotFiles      ChatbotFiles[]
  CatalogContent    CatalogContent[]
  crawler           Crawler?         @relation(fields: [crawlerId], references: [id], onDelete: Cascade)
  knowledgeSource   KnowledgeSource? @relation(fields: [knowledgeSourceId], references: [id])
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model ChatbotModel {
  id      String    @id @default(cuid())
  name    String
  Chatbot Chatbot[]

  @@map("models")
}

model ClientInquiries {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  threadId  String
  email     String
  inquiry   String
  chatbotId String
  deletedAt DateTime?
  chatbot   Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  response  String
  threadId  String   @default("")
  from      String   @default("unknown")
  userIP    String?
  userId    String
  chatbotId String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ConversationSummary {
  id        String   @id @default(cuid())
  threadId  String   @unique
  title     String
  summary   String
  createdAt DateTime @default(now()) @map("created_at")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversationSummary")
}

model Crawler {
  id              String   @id @default(cuid())
  name            String
  createdAt       DateTime @default(now()) @map("created_at")
  userId          String
  crawlUrl        String
  urlMatch        String
  selector        String
  maxPagesToCrawl Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  File            File[]

  @@map("crawlers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                   @id @default(cuid())
  name                     String?
  email                    String?                  @unique
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime                 @default(now()) @map("created_at")
  updatedAt                DateTime                 @updatedAt
  inquiryEmailEnabled      Boolean                  @default(true)
  marketingEmailEnabled    Boolean                  @default(true)
  stripeSubscriptionStatus String?
  stripeCurrentPeriodEnd   DateTime?                @map("stripe_current_period_end")
  stripeCustomerId         String?                  @unique @map("stripe_customer_id")
  stripePriceId            String?                  @map("stripe_price_id")
  stripeSubscriptionId     String?                  @unique @map("stripe_subscription_id")
  twilioSubaccountSid      String?                  @unique @map("twilio_subaccount_sid")
  twilioSubaccountAuthToken String?
  addressLine1             String?
  addressLine2             String?
  businessAddress          String?
  businessName             String?
  businessWebsite          String?
  businessRegistrationNumber String?
  city                     String?
  companyName              String?
  companyType              String?    // 'standard' | 'sole_proprietor'
  companySize              String?
  country                  String?                  @default("US")
  industryType             String?                  @default("other")
  onboardingCompleted      Boolean                  @default(false)
  postalCode               String?
  state                    String?
  taxId                    String?
  accounts                 Account[]
  openAIConfig             OpenAIConfig?
  sessions                 Session[]
  bookedAppointments       Appointment[]            @relation("BookedAppointments")
  calendars                Calendar[]
  chatbots                 Chatbot[]
  conversationSummaries    ConversationSummary[]
  crawlers                 Crawler[]
  files                    File[]
  forms                    Form[]
  invoices                 Invoice[]
  knowledgeSources         KnowledgeSource[]
  messages                 Message[]
  paymentMethods           PaymentMethod[]
  phoneNumbers             TwilioPhoneNumber[]
  subscriptionItems        SubscriptionItem[]
  integrationSettings      UserIntegrationSetting[]
  voices                   UserVoice[]
  usageRecords             UsageRecord[]
  emailVerificationToken   EmailVerificationToken?
  
  // A2P 10DLC Registration relationships
  twilioA2PBrand           TwilioA2PBrand?
  twilioA2PCampaigns       TwilioA2PCampaign[]
  
  // 10DLC Trust Hub fields
  trustHubProfileSid       String?    // Primary Customer Profile SID
  a2pProfileBundleSid      String?    // A2P Messaging Profile Bundle SID
  a2pBrandSid              String?    // Brand Registration SID
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id         String   @id @default(cuid())
  userId     String   @unique
  code       String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("email_verification_tokens")
}

model KnowledgeSource {
  id                   String           @id @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  userId               String
  catalogMode          String?
  vectorStoreId        String?
  vectorStoreUpdatedAt DateTime?
  catalogContents      CatalogContent[]
  files                File[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  qaContents           QAContent[]
  textContents         TextContent[]
  websiteContents      WebsiteContent[]
  chatbots             Chatbot[]        @relation("ChatbotToKnowledgeSource")

  @@map("knowledge_sources")
}

model TextContent {
  id                String          @id @default(cuid())
  content           String
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  knowledgeSourceId String
  openAIFileId      String?
  knowledgeSource   KnowledgeSource @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)

  @@map("text_contents")
}

model WebsiteContent {
  id                String          @id @default(cuid())
  url               String
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  knowledgeSourceId String
  searchType        String          @default("crawl")
  instructions      String?
  knowledgeSource   KnowledgeSource @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)

  @@map("website_contents")
}

model QAContent {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  knowledgeSourceId String
  answer            String
  question          String
  openAIFileId      String?
  knowledgeSource   KnowledgeSource @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)

  @@map("qa_contents")
}

model CatalogContent {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  instructions      String?
  knowledgeSourceId String
  fileId            String?
  extractedContent  String?         @map("extracted_content")
  openAIFileId      String?
  file              File?           @relation(fields: [fileId], references: [id])
  knowledgeSource   KnowledgeSource @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)
  products          Product[]

  @@map("catalog_contents")
}

model Product {
  id               String         @id @default(cuid())
  title            String
  description      String?
  price            Float
  taxRate          Float
  categories       String[]
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  catalogContentId String
  imageUrl         String?
  catalogContent   CatalogContent @relation(fields: [catalogContentId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Form {
  id          String           @id @default(cuid())
  name        String
  description String?
  status      String           @default("active")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  chatbots    ChatbotForm[]
  fields      FormField[]
  submissions FormSubmission[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forms")
}

model FormField {
  id          String           @id @default(cuid())
  name        String
  description String?
  type        String
  required    Boolean          @default(false)
  options     String[]
  position    Int
  formId      String
  fieldValues FormFieldValue[]
  form        Form             @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_fields")
}

model FormSubmission {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  threadId    String?
  formId      String
  chatbotId   String
  fieldValues FormFieldValue[]
  chatbot     Chatbot          @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  form        Form             @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_submissions")
}

model FormFieldValue {
  id           String         @id @default(cuid())
  value        String
  fieldId      String
  submissionId String
  field        FormField      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("form_field_values")
}

model ChatbotForm {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  formId    String
  chatbotId String
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formId, chatbotId])
  @@map("chatbot_forms")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  stripePaymentMethodId String   @unique
  brand                 String
  last4                 String
  expMonth              Int
  expYear               Int
  isDefault             Boolean  @default(false)
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model TwilioPhoneNumber {
  id           String    @id @default(cuid())
  phoneNumber  String    @unique
  twilioSid    String    @unique
  country      String
  monthlyPrice Decimal   @db.Decimal(10, 2)
  status       String    @default("pending") // pending, active, suspended
  purchasedAt  DateTime  @default(now())
  userId       String
  chatbotId    String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Stripe subscription tracking (NEW APPROACH)
  subscriptionItemId String? // Reference to SubscriptionItem
  
  // Legacy fields to keep for now
  renewalDate  DateTime // Keep for display purposes
  
  // Additional data storage
  metadata     Json?    // Store purchase details, pricing info, etc.
  
  // WhatsApp Configuration
  whatsappEnabled      Boolean  @default(false)
  whatsappBusinessId   String?  // WhatsApp Business Account ID
  whatsappDisplayName  String?  // Display name for WhatsApp
  whatsappConfiguredAt DateTime?
  
  // Legacy 10DLC fields (to be removed)
  // Keep temporarily for migration
  a2pRegistrationStatus String?
  a2pRegistrationError  String?
  a2pRegisteredAt       DateTime?
  a2pCampaignSid        String?
  a2pBrandSid           String?
  
  invoices          Invoice[]
  chatbot           Chatbot?         @relation(fields: [chatbotId], references: [id])
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionItem  SubscriptionItem? @relation(fields: [subscriptionItemId], references: [id])

  @@map("twilio_phone_numbers")
}

model SubscriptionItem {
  id                       String             @id @default(cuid())
  userId                   String
  stripeSubscriptionItemId String             @unique
  stripePriceId            String             // e.g., price_phone_number, price_premium_features
  itemType                 String             // 'phone_number', 'premium_features', 'extra_storage'
  itemId                   String?            // Reference to TwilioPhoneNumber.id if applicable
  quantity                 Int                @default(1)
  isActive                 Boolean            @default(true)
  metadata                 Json?              // Store additional data like phone number, feature details
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumbers             TwilioPhoneNumber[] // One subscription item can have multiple phone numbers

  @@map("subscription_items")
}

model UserVoice {
  id          String   @id @default(cuid())
  name        String   // Custom name given by user
  openaiVoice String   // OpenAI voice: alloy, ash, ballad, coral, echo, sage, shimmer, verse
  description String?  // Custom description/instructions for the voice
  language    String?  // Language code if specified
  isDefault   Boolean  @default(false) // Whether this is the user's default voice
  addedOn     DateTime @default(now())
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name]) // Each user can have unique voice names
  @@map("user_voices")
}

model Invoice {
  id                    String             @id @default(cuid())
  stripeInvoiceId       String?            @unique
  stripePaymentIntentId String?
  amount                Decimal            @db.Decimal(10, 2)
  status                String             @default("pending")
  description           String
  type                  String
  userId                String
  twilioPhoneNumberId   String?
  pdfUrl                String?
  metadata              Json?              // Store additional data
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  twilioPhoneNumber     TwilioPhoneNumber? @relation(fields: [twilioPhoneNumberId], references: [id])
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AssistantSettings {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  chatbotId         String   @unique
  openaiAssistantId String?
  openaiThreadId    String?
  instructions      String?  @default("You are a helpful AI assistant.")
  tools             Json?    @default("[]")
  retrievalSettings Json?    @default("{}")
  chatbot           Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("AssistantSettings")
}

model Calendar {
  id                        String        @id @default(cuid())
  name                      String
  userId                    String
  workingHoursStart         String        @default("09:00")
  workingHoursEnd           String        @default("17:00")
  includeSaturday           Boolean       @default(true)
  includeSunday             Boolean       @default(false)
  notificationEmailEnabled  Boolean       @default(true)
  emailReminderEnabled      Boolean       @default(true)
  smsReminderEnabled        Boolean       @default(true)
  reminderTimeMinutes       Int           @default(30)
  askForDuration            Boolean       @default(true)
  askForNotes               Boolean       @default(true)
  defaultDuration           Int           @default(30)
  bufferBetweenAppointments Int           @default(15)
  maxBookingsPerSlot        Int           @default(1)
  minimumAdvanceNotice      Int           @default(60)
  requirePhoneNumber        Boolean       @default(true)
  defaultLocation           String?
  bookingPrompt             String?
  confirmationMessage       String?
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  confirmationRequired      Boolean       @default(true)
  confirmationTimeoutHours  Int           @default(24)
  notificationSmsEnabled    Boolean       @default(true)
  appointments              Appointment[]
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatbots                  Chatbot[]

  @@map("calendars")
}

model Appointment {
  id                String            @id @default(cuid())
  calendarId        String
  bookedByUserId    String?
  clientName        String
  clientPhoneNumber String?
  description       String
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus @default(PENDING)
  color             String            @default("indigo")
  source            String?
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  clientEmail       String?
  bookedByUser      User?             @relation("BookedAppointments", fields: [bookedByUserId], references: [id])
  calendar          Calendar          @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, startTime, endTime])
  @@index([bookedByUserId])
  @@map("appointments")
}

model UserIntegrationSetting {
  id            String    @id @default(cuid())
  userId        String
  integrationId String
  isEnabled     Boolean   @default(true)
  configuredAt  DateTime? @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, integrationId])
  @@index([userId])
  @@map("user_integration_settings")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model UsageRecord {
  id                   String   @id @default(cuid())
  userId               String
  usageType            String   // 'message', 'sms', 'web_search', 'conversation_summary', 'whatsapp_conversation', 'voice_minute'
  quantity             Int      @default(1)
  metadata             Json?    // Store additional context like chatbotId, phoneNumber, etc.
  billingPeriodStart   DateTime
  billingPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, billingPeriodStart, billingPeriodEnd])
  @@index([userId, usageType, billingPeriodStart])
  @@index([createdAt])
  @@map("usage_records")
}

// New model to track A2P 10DLC Brand registrations per user
model TwilioA2PBrand {
  id                    String   @id @default(cuid())
  userId                String   @unique // One brand per user
  twilioAccountSid      String   // Which Twilio account (main or subaccount)
  brandSid             String   @unique // Twilio Brand SID
  brandStatus          String   // draft, pending, approved, failed, suspended
  brandType            String   @default("standard") // standard, low_volume, starter
  companyName          String
  businessWebsite      String?
  entityType           String   @default("private_for_profit") // private_for_profit, public_for_profit, non_profit, government
  registrationReason   String   @default("marketing") // marketing, mixed, political, charity, 2fa, higher_education, emergency
  vertical             String   // healthcare, finance, retail, etc.
  ein                  String?  // Tax ID (optional)
  address              Json     // Address information
  contactInfo          Json     // Contact information  
  registrationData     Json?    // Full registration payload
  submittedAt          DateTime?
  approvedAt           DateTime?
  rejectedAt           DateTime?
  errorMessage         String?
  reviewNotes          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns            TwilioA2PCampaign[]

  @@map("twilio_a2p_brands")
}

// New model to track A2P 10DLC Campaign registrations
model TwilioA2PCampaign {
  id                    String   @id @default(cuid())
  userId                String   
  brandId               String   // Reference to TwilioA2PBrand
  twilioAccountSid      String   // Which Twilio account (main or subaccount)
  campaignSid          String   @unique // Twilio Campaign SID
  campaignStatus       String   // draft, pending, approved, failed, suspended
  useCaseCategory      String   @default("mixed") // mixed, marketing, 2fa, higher_education, public_service_announcement, emergency, charity, low_volume
  description          String
  messageFlow          String   // Description of message flow
  helpMessage          String   // Help/STOP message
  optInMessage         String   // Opt-in confirmation
  sampleMessages       Json     // Array of sample messages
  registrationData     Json?    // Full campaign registration payload
  submittedAt          DateTime?
  approvedAt           DateTime?
  rejectedAt           DateTime?
  errorMessage         String?
  reviewNotes          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand                TwilioA2PBrand     @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("twilio_a2p_campaigns")
}
