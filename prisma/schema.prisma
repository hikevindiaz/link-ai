generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model OpenAIConfig {
  id           String   @id @default(cuid())
  userId       String   @unique
  globalAPIKey String
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatbotFiles {
  id         String   @id @default(cuid())
  assignedAt DateTime @default(now())
  chatbotId  String
  fileId     String
  chatbot    Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model ChatbotMessagesExport {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now()) @map("created_at")
  blobUrl         String
  blobDownloadUrl String
  lastXDays       Int
  chatbotId       String
  chatbot         Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model ChatbotErrors {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now()) @map("created_at")
  errorMessage String
  threadId     String
  chatbotId    String
  chatbot      Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Chatbot {
  id                              String                  @id @default(cuid())
  name                            String
  userId                          String
  openaiId                        String?                 @default("")
  createdAt                       DateTime                @default(now()) @map("created_at")
  openaiKey                       String?                 @default("")
  modelId                         String?
  prompt                          String?                 @default("You are a helpful assistant.")
  welcomeMessage                  String?                 @default("Hello! How can I help you today?")
  chatbotErrorMessage             String?                 @default("I'm sorry, I encountered an error. Please try again later.")
  isImported                      Boolean                 @default(false)
  chatTitle                       String                  @default("2")
  chatMessagePlaceHolder          String                  @default("Type a message...")
  rightToLeftLanguage             Boolean                 @default(false)
  bubbleColor                     String                  @default("#FFFFFF")
  bubbleTextColor                 String                  @default("#000000")
  riveOrbColor                    Int?
  borderGradientColors            String[]                @default([])
  chatHeaderBackgroundColor       String                  @default("FFFFFF")
  chatHeaderTextColor             String                  @default("#000000")
  chatbotReplyBackgroundColor     String                  @default("#e4e4e7")
  chatbotReplyTextColor           String                  @default("#000000")
  userReplyBackgroundColor        String                  @default("#e4e4e7")
  userReplyTextColor              String                  @default("#000000")
  chatbotLogoURL                  String?
  chatInputStyle                  String                  @default("default")
  inquiryEnabled                  Boolean                 @default(false)
  inquiryLinkText                 String                  @default("Contact our support team")
  inquiryTitle                    String                  @default("Contact our support team")
  inquirySubtitle                 String                  @default("Our team is here to help you with any questions you may have. Please provide us with your email and a brief message so we can assist you.")
  inquiryEmailLabel               String                  @default("Email")
  inquiryMessageLabel             String                  @default("Message")
  inquirySendButtonText           String                  @default("Send message")
  inquiryAutomaticReplyText       String                  @default("Your inquiry has been sent. Our team will get back to you shortly.")
  inquiryDisplayLinkAfterXMessage Int                     @default(1)
  chatHistoryEnabled              Boolean                 @default(false)
  displayBranding                 Boolean                 @default(true)
  chatFileAttachementEnabled      Boolean                 @default(false)
  maxCompletionTokens             Int                     @default(1200)
  maxPromptTokens                 Int                     @default(1200)
  bannedIps                       String[]                @default([])
  allowEveryone                   Boolean                 @default(true)
  allowedIpRanges                 String[]                @default([])
  chatBackgroundColor             String                  @default("#FFFFFF")
  buttonTheme                     String                  @default("light")
  websiteEnabled                  Boolean                 @default(false)
  whatsappEnabled                 Boolean                 @default(false)
  smsEnabled                      Boolean                 @default(false)
  messengerEnabled                Boolean                 @default(false)
  instagramEnabled                Boolean                 @default(false)
  callTimeout                     Int?
  checkUserPresence               Boolean?                @default(false)
  hangUpMessage                   String?
  language                        String?                 @default("en")
  phoneNumber                     String?
  presenceMessage                 String?
  presenceMessageDelay            Int?
  responseRate                    String?
  secondLanguage                  String?
  silenceTimeout                  Int?
  temperature                     Float                   @default(0.7)
  voice                           String?
  lastTrainedAt                   DateTime?
  trainingMessage                 String?
  trainingStatus                  String                  @default("idle")
  iconType                        String?                 @default("orb")
  calendarEnabled                 Boolean                 @default(false)
  calendarId                      String?
  assistantSettings               AssistantSettings?
  ChatbotErrors                   ChatbotErrors[]
  ChatbotFiles                    ChatbotFiles[]
  ChatbotMessagesExport           ChatbotMessagesExport[]
  ClientInquiries                 ClientInquiries[]
  forms                           ChatbotForm[]
  calendar                        Calendar?               @relation(fields: [calendarId], references: [id])
  model                           ChatbotModel?           @relation(fields: [modelId], references: [id])
  user                            User                    @relation(fields: [userId], references: [id])
  formSubmissions                 FormSubmission[]
  twilioPhoneNumber               TwilioPhoneNumber?
  knowledgeSources                KnowledgeSource[]       @relation("ChatbotToKnowledgeSource")

  @@map("chatbots")
}

model File {
  id                String            @id @default(cuid())
  userId            String
  name              String
  createdAt         DateTime          @default(now()) @map("created_at")
  blobUrl           String
  crawlerId         String?
  knowledgeSourceId String?
  storageProvider   String            @default("vercel")
  storageUrl        String?
  vectorDocumentId  String?           @map("vector_document_id") @db.Uuid
  extractedText     String?
  ChatbotFiles      ChatbotFiles[]
  CatalogContent    CatalogContent[]
  crawler           Crawler?          @relation(fields: [crawlerId], references: [id], onDelete: Cascade)
  knowledgeSource   KnowledgeSource?  @relation(fields: [knowledgeSourceId], references: [id])
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  vector_documents  vector_documents? @relation(fields: [vectorDocumentId], references: [id], onUpdate: NoAction)

  @@map("files")
}

model ChatbotModel {
  id      String    @id @default(cuid())
  name    String
  Chatbot Chatbot[]

  @@map("models")
}

model ClientInquiries {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  threadId  String
  email     String
  inquiry   String
  chatbotId String
  deletedAt DateTime?
  chatbot   Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  response  String
  threadId  String   @default("")
  from      String   @default("unknown")
  userIP    String?
  userId    String
  chatbotId String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ConversationSummary {
  id        String   @id @default(cuid())
  threadId  String   @unique
  title     String
  summary   String
  createdAt DateTime @default(now()) @map("created_at")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversationSummary")
}

model Crawler {
  id              String   @id @default(cuid())
  name            String
  createdAt       DateTime @default(now()) @map("created_at")
  userId          String
  crawlUrl        String
  urlMatch        String
  selector        String
  maxPagesToCrawl Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  File            File[]

  @@map("crawlers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                   @id @default(cuid())
  name                       String?
  email                      String?                  @unique
  emailVerified              DateTime?
  image                      String?
  createdAt                  DateTime                 @default(now()) @map("created_at")
  inquiryEmailEnabled        Boolean                  @default(true)
  marketingEmailEnabled      Boolean                  @default(true)
  stripeSubscriptionStatus   String?
  stripeCurrentPeriodEnd     DateTime?                @map("stripe_current_period_end")
  stripeCustomerId           String?                  @unique @map("stripe_customer_id")
  stripePriceId              String?                  @map("stripe_price_id")
  stripeSubscriptionId       String?                  @unique @map("stripe_subscription_id")
  twilioSubaccountSid        String?                  @unique @map("twilio_subaccount_sid")
  addressLine1               String?
  addressLine2               String?
  businessWebsite            String?
  city                       String?
  companyName                String?
  companySize                String?
  country                    String?                  @default("US")
  industryType               String?                  @default("other")
  onboardingCompleted        Boolean                  @default(false)
  postalCode                 String?
  state                      String?
  a2pBrandSid                String?
  a2pProfileBundleSid        String?
  businessAddress            String?
  businessName               String?
  businessRegistrationNumber String?
  companyType                String?
  taxId                      String?
  trustHubProfileSid         String?
  twilioSubaccountAuthToken  String?
  updatedAt                  DateTime                 @updatedAt
  role                       String                   @default("USER")
  blockedAt                  DateTime?
  blockedBy                  String?
  status                     String                   @default("ACTIVE")
  accounts                   Account[]
  openAIConfig               OpenAIConfig?
  sessions                   Session[]
  bookedAppointments         Appointment[]            @relation("BookedAppointments")
  calendars                  Calendar[]
  chatbots                   Chatbot[]
  conversationSummaries      ConversationSummary[]
  crawlers                   Crawler[]
  emailVerificationToken     EmailVerificationToken?
  files                      File[]
  forms                      Form[]
  invitationsSent            Invitation[]             @relation("InvitationsSent")
  invoices                   Invoice[]
  knowledgeSources           KnowledgeSource[]
  messages                   Message[]
  notifications              Notification[]
  paymentMethods             PaymentMethod[]
  subscriptionItems          SubscriptionItem[]
  twilioA2PBrand             TwilioA2PBrand?
  twilioA2PCampaigns         TwilioA2PCampaign[]
  phoneNumbers               TwilioPhoneNumber[]
  usageRecords               UsageRecord[]
  integrationSettings        UserIntegrationSetting[]
  voices                     UserVoice[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model KnowledgeSource {
  id                  String           @id @default(cuid())
  name                String
  description         String?
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  userId              String
  catalogMode         String?
  embeddingDimensions Int              @default(384)
  embeddingModel      String           @default("gte-small")
  embeddingProvider   String           @default("supabase")
  catalogContents     CatalogContent[]
  files               File[]
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  qaContents          QAContent[]
  textContents        TextContent[]
  websiteContents     WebsiteContent[]
  chatbots            Chatbot[]        @relation("ChatbotToKnowledgeSource")

  @@map("knowledge_sources")
}

model TextContent {
  id                String            @id @default(cuid())
  content           String
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  knowledgeSourceId String
  vectorDocumentId  String?           @map("vector_document_id") @db.Uuid
  knowledgeSource   KnowledgeSource   @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)
  vector_documents  vector_documents? @relation(fields: [vectorDocumentId], references: [id], onUpdate: NoAction)

  @@map("text_contents")
}

model WebsiteContent {
  id                String            @id @default(cuid())
  url               String
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  knowledgeSourceId String
  searchType        String            @default("crawl")
  instructions      String?
  vectorDocumentId  String?           @map("vector_document_id") @db.Uuid
  knowledgeSource   KnowledgeSource   @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)
  vector_documents  vector_documents? @relation(fields: [vectorDocumentId], references: [id], onUpdate: NoAction)

  @@map("website_contents")
}

model QAContent {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  knowledgeSourceId String
  answer            String
  question          String
  vectorDocumentId  String?           @map("vector_document_id") @db.Uuid
  knowledgeSource   KnowledgeSource   @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)
  vector_documents  vector_documents? @relation(fields: [vectorDocumentId], references: [id], onUpdate: NoAction)

  @@map("qa_contents")
}

model CatalogContent {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  instructions      String?
  knowledgeSourceId String
  fileId            String?
  extractedContent  String?           @map("extracted_content")
  vectorDocumentId  String?           @map("vector_document_id") @db.Uuid
  file              File?             @relation(fields: [fileId], references: [id])
  knowledgeSource   KnowledgeSource   @relation(fields: [knowledgeSourceId], references: [id], onDelete: Cascade)
  vector_documents  vector_documents? @relation(fields: [vectorDocumentId], references: [id], onUpdate: NoAction)
  products          Product[]

  @@map("catalog_contents")
}

model Product {
  id               String         @id @default(cuid())
  title            String
  description      String?
  price            Float
  taxRate          Float
  categories       String[]
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  catalogContentId String
  imageUrl         String?
  catalogContent   CatalogContent @relation(fields: [catalogContentId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Form {
  id          String           @id @default(cuid())
  name        String
  description String?
  status      String           @default("active")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  chatbots    ChatbotForm[]
  fields      FormField[]
  submissions FormSubmission[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forms")
}

model FormField {
  id          String           @id @default(cuid())
  name        String
  description String?
  type        String
  required    Boolean          @default(false)
  options     String[]
  position    Int
  formId      String
  fieldValues FormFieldValue[]
  form        Form             @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_fields")
}

model FormSubmission {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  threadId    String?
  formId      String
  chatbotId   String
  fieldValues FormFieldValue[]
  chatbot     Chatbot          @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  form        Form             @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_submissions")
}

model FormFieldValue {
  id           String         @id @default(cuid())
  value        String
  fieldId      String
  submissionId String
  field        FormField      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("form_field_values")
}

model ChatbotForm {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  formId    String
  chatbotId String
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formId, chatbotId])
  @@map("chatbot_forms")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  stripePaymentMethodId String   @unique
  brand                 String
  last4                 String
  expMonth              Int
  expYear               Int
  isDefault             Boolean  @default(false)
  userId                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model TwilioPhoneNumber {
  id                    String            @id @default(cuid())
  phoneNumber           String            @unique
  twilioSid             String            @unique
  country               String
  monthlyPrice          Decimal           @db.Decimal(10, 2)
  status                String            @default("pending")
  purchasedAt           DateTime          @default(now())
  renewalDate           DateTime
  userId                String
  chatbotId             String?           @unique
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  subscriptionItemId    String?
  metadata              Json?
  a2pBrandSid           String?
  a2pCampaignSid        String?
  a2pRegisteredAt       DateTime?
  a2pRegistrationError  String?
  a2pRegistrationStatus String?
  whatsappBusinessId    String?
  whatsappConfiguredAt  DateTime?
  whatsappDisplayName   String?
  whatsappEnabled       Boolean           @default(false)
  subaccountAuthToken   String?
  subaccountSid         String?
  invoices              Invoice[]
  chatbot               Chatbot?          @relation(fields: [chatbotId], references: [id])
  subscriptionItem      SubscriptionItem? @relation(fields: [subscriptionItemId], references: [id])
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twilio_phone_numbers")
}

model SubscriptionItem {
  id                       String              @id @default(cuid())
  userId                   String
  stripeSubscriptionItemId String              @unique
  stripePriceId            String
  itemType                 String
  itemId                   String?
  quantity                 Int                 @default(1)
  isActive                 Boolean             @default(true)
  metadata                 Json?
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  user                     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumbers             TwilioPhoneNumber[]

  @@map("subscription_items")
}

model UserVoice {
  id          String   @id @default(cuid())
  name        String
  language    String?
  addedOn     DateTime @default(now())
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  isDefault   Boolean  @default(false)
  openaiVoice String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("user_voices")
}

model Invoice {
  id                    String             @id @default(cuid())
  stripeInvoiceId       String?            @unique
  stripePaymentIntentId String?
  amount                Decimal            @db.Decimal(10, 2)
  status                String             @default("pending")
  description           String
  type                  String
  userId                String
  twilioPhoneNumberId   String?
  pdfUrl                String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  metadata              Json?
  twilioPhoneNumber     TwilioPhoneNumber? @relation(fields: [twilioPhoneNumberId], references: [id])
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model AssistantSettings {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  chatbotId         String   @unique
  openaiAssistantId String?
  openaiThreadId    String?
  instructions      String?  @default("You are a helpful AI assistant.")
  tools             Json?    @default("[]")
  retrievalSettings Json?    @default("{}")
  chatbot           Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@map("AssistantSettings")
}

model Calendar {
  id                        String        @id @default(cuid())
  name                      String
  userId                    String
  workingHoursStart         String        @default("09:00")
  workingHoursEnd           String        @default("17:00")
  includeSaturday           Boolean       @default(true)
  includeSunday             Boolean       @default(false)
  smsReminderEnabled        Boolean       @default(true)
  reminderTimeMinutes       Int           @default(30)
  askForDuration            Boolean       @default(true)
  askForNotes               Boolean       @default(true)
  defaultDuration           Int           @default(30)
  bufferBetweenAppointments Int           @default(15)
  maxBookingsPerSlot        Int           @default(1)
  minimumAdvanceNotice      Int           @default(60)
  requirePhoneNumber        Boolean       @default(true)
  defaultLocation           String?
  bookingPrompt             String?
  confirmationMessage       String?
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  confirmationRequired      Boolean       @default(true)
  confirmationTimeoutHours  Int           @default(24)
  notificationSmsEnabled    Boolean       @default(true)
  emailReminderEnabled      Boolean       @default(true)
  notificationEmailEnabled  Boolean       @default(true)
  appointments              Appointment[]
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatbots                  Chatbot[]

  @@map("calendars")
}

model Appointment {
  id                String            @id @default(cuid())
  calendarId        String
  bookedByUserId    String?
  clientName        String
  clientPhoneNumber String?
  description       String
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus @default(PENDING)
  color             String            @default("indigo")
  source            String?
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  clientEmail       String?
  bookedByUser      User?             @relation("BookedAppointments", fields: [bookedByUserId], references: [id])
  calendar          Calendar          @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, startTime, endTime])
  @@index([bookedByUserId])
  @@map("appointments")
}

model UserIntegrationSetting {
  id            String    @id @default(cuid())
  userId        String
  integrationId String
  isEnabled     Boolean   @default(true)
  configuredAt  DateTime? @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, integrationId])
  @@index([userId])
  @@map("user_integration_settings")
}

model UsageRecord {
  id                 String   @id @default(cuid())
  userId             String
  usageType          String
  quantity           Int      @default(1)
  metadata           Json?
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, billingPeriodStart, billingPeriodEnd])
  @@index([userId, usageType, billingPeriodStart])
  @@index([createdAt])
  @@map("usage_records")
}

model TwilioA2PBrand {
  id                 String              @id @default(cuid())
  userId             String              @unique
  twilioAccountSid   String
  brandSid           String              @unique
  brandStatus        String
  brandType          String              @default("standard")
  companyName        String
  businessWebsite    String?
  entityType         String              @default("private_for_profit")
  registrationReason String              @default("marketing")
  vertical           String
  ein                String?
  address            Json
  contactInfo        Json
  registrationData   Json?
  submittedAt        DateTime?
  approvedAt         DateTime?
  rejectedAt         DateTime?
  errorMessage       String?
  reviewNotes        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns          TwilioA2PCampaign[]

  @@map("twilio_a2p_brands")
}

model TwilioA2PCampaign {
  id               String         @id @default(cuid())
  userId           String
  brandId          String
  twilioAccountSid String
  campaignSid      String         @unique
  campaignStatus   String
  useCaseCategory  String         @default("mixed")
  description      String
  messageFlow      String
  helpMessage      String
  optInMessage     String
  sampleMessages   Json
  registrationData Json?
  submittedAt      DateTime?
  approvedAt       DateTime?
  rejectedAt       DateTime?
  errorMessage     String?
  reviewNotes      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  brand            TwilioA2PBrand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twilio_a2p_campaigns")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  actionUrl String?  @map("action_url")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@map("notifications")
}

model Invitation {
  id            String    @id @default(cuid())
  email         String
  role          String    @default("USER")
  token         String    @unique
  status        String    @default("pending")
  invitedBy     String
  acceptedBy    String?
  acceptedAt    DateTime?
  expiresAt     DateTime
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  invitedByUser User      @relation("InvitationsSent", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([email, status])
  @@index([token])
  @@index([expiresAt, status])
  @@map("invitations")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model embedding_jobs {
  job_id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  knowledge_source_id String
  content_type        String
  content_id          String
  content             String
  metadata            Json?     @default("{}")
  model_name          String?   @default("text-embedding-3-small")
  dimensions          Int?      @default(1536)
  status              String?   @default("pending")
  error               String?
  result              Json?
  started_at          DateTime? @db.Timestamptz(6)
  completed_at        DateTime? @db.Timestamptz(6)
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)
  chunking_enabled    Boolean?  @default(false)
  max_chunk_size      Int?      @default(1800)
  chunk_overlap       Int?      @default(150)
  chunks_generated    Int?      @default(1)

  @@index([created_at], map: "idx_embedding_jobs_created")
  @@index([knowledge_source_id], map: "idx_embedding_jobs_knowledge_source")
  @@index([status], map: "idx_embedding_jobs_status")
  @@index([chunking_enabled, status], map: "idx_embedding_jobs_chunking")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model vector_documents {
  id                  String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  knowledge_source_id String
  content_type        String
  content_id          String
  content             String
  embedding           Unsupported("vector(1536)")?
  metadata            Json                   @default("{}")
  created_at          DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?              @default(now()) @db.Timestamptz(6)
  catalog_contents    CatalogContent[]
  files               File[]
  qa_contents         QAContent[]
  text_contents       TextContent[]
  website_contents    WebsiteContent[]

  @@unique([knowledge_source_id, content_type, content_id])
  @@index([embedding])
  @@index([metadata], type: Gin)
  @@index([knowledge_source_id], map: "vector_documents_source_idx")
  @@index([content_type], map: "vector_documents_type_idx")
  @@index([knowledge_source_id, content_type, content_id], map: "idx_vector_documents_content_id_chunk")
}



enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
