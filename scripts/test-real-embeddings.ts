/**
 * Test script to verify real embedding generation
 */

import { createClient } from '@supabase/supabase-js';
import prisma from '@/lib/prisma';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testRealEmbeddings() {
  console.log('🚀 Testing Real Embedding Generation...\n');

  try {
    // 1. Find a knowledge source
    const knowledgeSource = await prisma.knowledgeSource.findFirst({
      where: {
        name: 'Link AI KB'
      }
    });

    if (!knowledgeSource) {
      console.error('❌ No knowledge source found. Create one first.');
      return;
    }

    console.log(`✅ Found knowledge source: ${knowledgeSource.name}`);

    // 2. Create a test embedding job
    const testContent = "LinkAI is an advanced AI assistant platform that helps businesses automate customer interactions.";
    
    const { data: job, error: jobError } = await supabase
      .from('embedding_jobs')
      .insert({
        job_id: crypto.randomUUID(),
        knowledge_source_id: knowledgeSource.id,
        content_type: 'text',
        content_id: 'test-' + Date.now(),
        content: testContent,
        metadata: { test: true },
        model_name: 'gte-small',
        dimensions: 384,
        status: 'pending'
      })
      .select()
      .single();

    if (jobError) {
      console.error('❌ Failed to create embedding job:', jobError);
      return;
    }

    console.log(`✅ Created embedding job: ${job.job_id}`);

    // 3. Invoke the Edge Function
    console.log('\n📡 Invoking Edge Function...');
    const { data: result, error: invokeError } = await supabase.functions.invoke('generate-embeddings');

    if (invokeError) {
      console.error('❌ Failed to invoke Edge Function:', invokeError);
      return;
    }

    console.log('✅ Edge Function response:', result);

    // 4. Check if the embedding was created
    console.log('\n🔍 Checking for generated embeddings...');
    
    // Wait a moment for processing
    await new Promise(resolve => setTimeout(resolve, 2000));

    const { data: vectorDoc, error: vectorError } = await supabase
      .from('vector_documents')
      .select('*')
      .eq('content_id', job.content_id)
      .single();

    if (vectorError || !vectorDoc) {
      console.error('❌ No vector document found:', vectorError);
      
      // Check job status
      const { data: updatedJob } = await supabase
        .from('embedding_jobs')
        .select('*')
        .eq('job_id', job.job_id)
        .single();
        
      console.log('Job status:', updatedJob?.status);
      console.log('Job error:', updatedJob?.error);
      return;
    }

    console.log('\n✅ Vector document created successfully!');
    console.log('- Document ID:', vectorDoc.id);
    console.log('- Content type:', vectorDoc.content_type);
    console.log('- Model used:', vectorDoc.metadata?.model);
    
    // Check embedding dimensions
    if (vectorDoc.embedding) {
      const embeddingArray = typeof vectorDoc.embedding === 'string' 
        ? JSON.parse(vectorDoc.embedding) 
        : vectorDoc.embedding;
      console.log('- Embedding dimensions:', embeddingArray.length);
      console.log('- First 5 values:', embeddingArray.slice(0, 5));
      
      // Verify these are real embeddings (not placeholders)
      const uniqueValues = new Set(embeddingArray);
      if (uniqueValues.size > 10) {
        console.log('✅ Real embeddings confirmed (high variance in values)');
      } else {
        console.log('⚠️  Low variance in embedding values - might be placeholders');
      }
    }

    // 5. Test search functionality
    console.log('\n🔍 Testing vector search...');
    const searchQuery = "AI assistant platform";
    
    const { data: searchResults, error: searchError } = await supabase
      .rpc('search_knowledge', {
        query_embedding: null, // Will be generated by the function
        query_text: searchQuery,
        source_ids: [knowledgeSource.id],
        match_threshold: 0.5,
        match_count: 5
      });

    if (searchError) {
      console.log('⚠️  Search function not available yet:', searchError.message);
    } else if (searchResults && searchResults.length > 0) {
      console.log(`✅ Found ${searchResults.length} search results`);
      searchResults.forEach((result: any, index: number) => {
        console.log(`  ${index + 1}. Score: ${result.similarity}, Content: ${result.content.substring(0, 50)}...`);
      });
    }

    console.log('\n🎉 Real embedding generation is working!');

  } catch (error) {
    console.error('❌ Test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the test
testRealEmbeddings(); 